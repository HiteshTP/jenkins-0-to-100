pipeline{
agent {label'slave}

tools{   // tools is used when ever we install the plugin for jenkins that,plugins use inside the pipeline we need to define it 
jdk 'jdk17'
maven 'maven3'
}
environment {
SCANNER_HOME= tool 'sonar-scanner'
stages{
stage('clone from github'){
steps{
echo 'cloning was sucesful'
git url: '<url of our git>, branch: 'main'
echo 'cloned successful'
}
}
stage('comploling the stage'){
steps{
echo 'compling stage because to find out any syntax based error in pipeline or not'
sh 'mvn compile'
}
}
stage('test'){
steps{
echo 'to find and test the functionality of the code'
sh 'mvn test'
}
}
stage('File system scan'){
steps{
echo 'we are going to perform a vulnerability scan on our source code to find out if there is any sensitive data'
sh 'trivy fs .' //using this command trivy generate the report inside the concole log it is hard to analise and not a good practice
sh 'trivy fs --format table -o trivy-fs-report.html .' //using this command the trivy generate the report in a specific formate and export it inside a seperate file
(here --formate table : means it generate the report in table formate, trivy-fs-report.html -this is a file name which the report that will be exported and .(dot)is nothing but a path it scan the current directory and we can give the different path
}
}
stage('sonarqube analysis'){
steps{
echo 'to find and test the functionality of the code'
withSonarQubeEnv('sonar'){
sh ''' $SCANNER_HOME/bin/sconner-scaner -Dsonar.projectName=BoardGame -Dsonar.projectKey-BoardGame\
        // $SCANNER_HOME/bin/sonar-scaner means $SCANNER_HOME is a environment we are calling the sonar-scanner that present in the bin path
       -Dsoanr.java.binaries= . '''  // this java project so we call .java and .binaries is a file location 
}
}
}
stage(' quality gate'){
steps{
script { 
waitForQualityGate abortPipeline: false, credentialsID: '<give the sonarqube credential id'
}
}
}
stage('Build'){
steps{
sh 'mvn package'
}
}
stage('Build and Tag Docker Image'){
steps{
script{
withDockerRegistry(credentialsID: 'docker-crd', toolName: 'docker') {
sh 'docker build -t boardgame .'
sh 'docker tag boardgame hiteshtp/boargame'
}
}
}
}
stage('image scan'){
steps{
sh 'trivy image --formate table -o trivy-fs-report.html hiteshtp/boargame'
}
}
stage('Push Docker Image'){
steps{
script{
withDockerRegistry(credentialsID: 'docker-crd', toolName: 'docker') {
sh 'docker build -t boardgame .'
sh 'docker push hiteshtp/boargame'
}
}
}
}
}
}
}
}

}
}
